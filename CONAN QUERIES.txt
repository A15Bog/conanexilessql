--MAINTENANCE
PRAGMA default_cache_size=700000;
PRAGMA cache_size=700000;
PRAGMA PAGE_SIZE = 4096;
VACUUM;
REINDEX;
ANALYZE;
pragma integrity_check

--FIND OWNER IDS
select id from characters where char_name = 'Bog';
select guildid from guilds where name = '-=A15=-';


--DELETE ALL STRUCTURES FOR PLAYER OR GUILD BY REPLACING OWNER IDS
delete from buildable_health where object_id in (select object_id from buildings where owner_id = '1071');
delete from building_instances where object_id in (select object_id from buildings where owner_id = '1071');
delete from properties where object_id in (select object_id from buildings where owner_id = '1071') and name not like '%Spawn%';
delete from buildings where owner_id = '1071';
delete from item_inventory where owner_id = '1071';


--EXPORT CSV OF ALL GUILDS, LEADERS, CHARACTERS, LEVEL, RANK
.headers on
.mode csv
.once guildplayers.csv
select quote(g.name) as GUILD, quote(g.guildid) as GUILDid, quote(c.char_name) as NAME, case c.rank WHEN '2' then 'Leader' WHEN '1' then 'Officer' WHEN '0' then 'Peon' ELSE c.rank END RANK, c.level as LEVEL, quote(c.playerid) as STEAMid, quote(c.id) as DBid from guilds g inner join characters c on g.guildid = c.guild order by g.name, c.rank desc, c.level desc, c.char_name;
.headers on
.mode csv
.once soloplayers.csv
select quote(char_name) as NAME, level as LEVEL, quote(playerID) as STEAMid, quote(id) as DBid from characters where id not in (select distinct c.id from guilds g inner join characters c on g.guildid = c.guild order by g.name, c.rank desc, c.level desc, c.char_name) order by char_name, level;
	

--DELETE OBJECTS FROM PLAYERS OR GUILDS WHO LONGER EXIST
delete from buildable_health where object_id in (select distinct object_id from buildings where owner_id not in (select id from characters) and owner_id not in (select guildid from guilds));
delete from building_instances where object_id in (select distinct object_id from buildings where owner_id not in (select id from characters) and owner_id not in (select guildid from guilds));
delete from properties where object_id in (select distinct object_id from buildings where owner_id not in (select id from characters) and owner_id not in (select guildid from guilds));
delete from buildings where owner_id not in (select id from characters) and owner_id not in (select guildid from guilds);
delete from actor_position where id not in (select object_id from buildings) and class like '%Placeables%';
delete from item_properties where owner_id not in (select id from characters) and owner_id not in (select guildid from guilds) and name like '%Learned%';
delete from item_properties where owner_id not in (select id from characters) and owner_id not in (select guildid from guilds) and name like '%CharacterUID%';


--DELETE ALL BEDROLLS AND CAMPFIRES FROM SERVER
delete from buildable_health where object_id in (select distinct object_id from properties where name in ('BP_PL_Bedroll_Fiber_C.HasHitGround','BP_PL_Bedroll_Fiber_C.SourceItemTemplateID','BasePlayerChar_C.BedRollID','BP_PL_Crafting_CampFire_C.HasHitGround','BP_PL_Crafting_CampFire_C.SourceItemTemplateID'));
delete from buildings where object_id in (select distinct object_id from properties where name in ('BP_PL_Bedroll_Fiber_C.HasHitGround','BP_PL_Bedroll_Fiber_C.SourceItemTemplateID','BasePlayerChar_C.BedRollID','BP_PL_Crafting_CampFire_C.HasHitGround','BP_PL_Crafting_CampFire_C.SourceItemTemplateID'));
delete from actor_position where id in (select distinct object_id from properties where name in ('BP_PL_Bedroll_Fiber_C.HasHitGround','BP_PL_Bedroll_Fiber_C.SourceItemTemplateID','BasePlayerChar_C.BedRollID','BP_PL_Crafting_CampFire_C.HasHitGround','BP_PL_Crafting_CampFire_C.SourceItemTemplateID'));
delete from item_inventory where template_id in ('12001','10001');
delete from properties where name in ('BP_PL_Bedroll_Fiber_C.HasHitGround','BP_PL_Bedroll_Fiber_C.SourceItemTemplateID','BasePlayerChar_C.BedRollID','BP_PL_Crafting_CampFire_C.HasHitGround','BP_PL_Crafting_CampFire_C.SourceItemTemplateID');

--UPDATE CHARACTER NAME
update characters set char_name = 'Newname' where char_name = 'Oldname';

--ADD CHARACTER MODIFY TIMESTAMP
ALTER TABLE characters ADD COLUMN bog_time timestamp DEFAULT NULL /* replace me */;
UPDATE characters SET bog_time = CURRENT_TIMESTAMP;
PRAGMA writable_schema = on;
UPDATE sqlite_master
SET sql = replace(sql, 'DEFAULT NULL /* replace me */',
                       'DEFAULT CURRENT_TIMESTAMP')
WHERE type = 'table'
  AND name = 'characters';
PRAGMA writable_schema = off;
CREATE TRIGGER characters_bog_time_modify
AFTER UPDATE
ON characters
FOR EACH ROW
BEGIN
UPDATE characters SET bog_time = CURRENT_TIMESTAMP
WHERE isAlive=new.isAlive
and id=old.id
OR killerName=new.killerName
and id=old.id
OR guild=new.guild
and id=old.id
OR level=new.level
and id=old.id
OR rank=new.rank
and id=old.id;
END;
